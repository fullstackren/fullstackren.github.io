(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{477:function(t,a,r){"use strict";r.r(a);var s=r(14),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript迁移到typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript迁移到typescript"}},[t._v("#")]),t._v(" JavaScript迁移到TypeScript")]),t._v(" "),a("h2",{attrs:{id:"迁移策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迁移策略"}},[t._v("#")]),t._v(" 迁移策略")]),t._v(" "),a("p",[t._v("大规模代码迁移往往是一项非常复杂的工作，Airbnb探索过几个迁移策略：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("混合迁移策略")]),t._v("：一个个文件进行迁移，修复类型错误。allowJS配置可以允许JS和TS文件在一个项目中并存。使用混合迁移策略可以不用暂停当前开发，逐步的一个个文件进行迁移。但是，对于研发人员需要更长的适应和迁移时间。")]),t._v(" "),a("li",[a("code",[t._v("完全迁移策略")]),t._v("：一次性实现文件完全迁移。我们会使用any或者@ts-ignore注释帮助项目编译，随后会补充更加具体的类型申明。")])]),t._v(" "),a("h3",{attrs:{id:"完全迁移策略好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完全迁移策略好处"}},[t._v("#")]),t._v(" 完全迁移策略好处")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("项目的一致性")]),t._v("：在完全迁移策略下，项目使用使用TypeScript来编写，因此，开发者并不需要在JS和TS之间进行切换。")]),t._v(" "),a("li",[a("code",[t._v("修复类型比修复文件容易")]),t._v("：修复一个完整文件非常复杂，因为它可能有很多外部依赖，因此，采用混合迁移的方式，很难保证迁移的进度和状态。")])]),t._v(" "),a("p",[t._v("因此，Airbnb采用了完全迁移策略。然而，一次性迁移完整项目难度非常大。Airbnb研发了一个转换工具：ts-migrate，在初试转换过程中，尽可能实现类型的自动转换。")])])}),[],!1,null,null,null);a.default=e.exports}}]);